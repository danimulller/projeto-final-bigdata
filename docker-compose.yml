version: '3.7'
############################
##  DEFAULT
############################
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.7.3}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@db_airflow/admin
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://admin:admin@db_airflow/admin
    AIRFLOW__CORE__MINIO_ENDPOINT: http://minio:9000
    AIRFLOW__CORE__MINIO_ACCESS_KEY: datalake
    AIRFLOW__CORE__MINIO_SECRET_KEY: datalake
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/config:/opt/airflow/config
    - ./airflow/plugins:/opt/airflow/plugins
    - ./util:/util
  user: "${AIRFLOW_UID:-50000}:0"
  
services:
############################
##  DATA LAKE
############################
  minio:
    image: minio/minio:latest
    platform: linux/amd64
    container_name: minio
    entrypoint: sh
    command: '-c ''mkdir -p /minio_data/raw && mkdir -p /minio_data/trusted && mkdir -p /minio_data/refined && minio server /minio_data --console-address ":9001"'''
    ports:
      - "9050:9000"
      - "9051:9001"
    hostname: minio
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_ACCESS_KEY: datalake
      MINIO_SECRET_KEY: datalake
    volumes:
      - ./minio/data1:/data

  namenode:
    image: fjardim/mds-namenode
    platform: linux/amd64
    container_name: namenode
    hostname: namenode
    volumes:
      - ./hadoop/hdfs/namenode:/hadoop/dfs/name
      - ./hadoop/util:/util
    env_file:
      - ./hadoop/hadoop.env
    ports:
      - "9870:9870"
    deploy:
      resources:
        limits:
          memory: 500m

  datanode:
    image: fjardim/mds-datanode
    platform: linux/amd64
    container_name: datanode
    hostname: datanode
    volumes:
      - ./hadoop/hdfs/datanode:/hadoop/dfs/data
      - ./hadoop/util:/util
    env_file:
      - ./hadoop/hadoop.env
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    depends_on:
      - namenode
    ports:
      - "9864:9864"
    deploy:
      resources:
        limits:
          memory: 500m

############################
## INGESTAO
############################
  nifi:
      image: apache/nifi:latest
      platform: linux/amd64
      container_name: nifi
      hostname: nifi
      volumes:
        - ./nifi/util:/util
      environment:
        NIFI_WEB_HTTP_PORT: "9090"
        NIFI_WEB_HTTPS_HOST: "nifi"
        TZ: "America/Sao_Paulo"
      command: >
        sh -c "ln -snf /usr/share/zoneinfo/$$TZ /etc/localtime && echo $$TZ > /etc/timezone"
      ports:
        - 49090:9090
      deploy:
        resources:
          limits:
            memory: 2g
            #cpus: '0.2'

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    platform: linux/amd64
    hostname: airflow-webserver
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "58080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - db-airflow
      - airflow-scheduler
      # - airflow-worker
    command: >
      bash -c "airflow db init && airflow webserver"

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    platform: linux/amd64
    hostname: airflow-scheduler
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - db-airflow

  # airflow-worker:
  #   <<: *airflow-common
  #   container_name: airflow-worker
  #   platform: linux/amd64
  #   hostname: airflow-worker
  #   command: celery worker
  #   healthcheck:
  #     # yamllint disable rule:line-length
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     <<: *airflow-common-env
  #     DUMB_INIT_SETSID: "0"
  #   depends_on:
  #     - db

  airflow-triggerer:
    <<: *airflow-common
    container_name: airflow-triggerer
    platform: linux/amd64
    hostname: airflow-triggerer
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    depends_on:
      - db-airflow

  airflow-cli:
    <<: *airflow-common
    container_name: airflow-cli
    platform: linux/amd64
    hostname: airflow-cli
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    command:
      - bash
      - -c
      - airflow

  airflow-flower:
    <<: *airflow-common
    container_name: airflow-flower
    platform: linux/amd64
    hostname: airflow-flower
    command: celery flower
    profiles:
      - flower
    ports:
      - "5555:5555"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

############################
## DATABASE
############################
  presto:
    platform: linux/amd64
    image: prestodb/presto
    hostname: presto
    container_name: presto
    volumes: 
      - ./presto/etc/catalog:/opt/presto-server/etc/catalog/
      - ./presto/etc/catalog:/opt/presto/etc/catalog/
      - ./presto/etc/catalog:/etc/catalog/ 
      - ./presto/etc/hadoop:/hadoop 
      - ./util:/util
    ports:
      - 18080:8080
    depends_on:
      - hive
    deploy:
      resources:
        limits:
          memory: 2g
          #cpus: '0.2'
  
  db:
    image: postgres
    platform: linux/amd64
    container_name: db
    hostname: db
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: admin
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c wal_level=logical
    ports:
      - 15432:5432
    volumes:
      - ./postgres/volume:/var/lib/postgresql/data
      - ./util:/util

  db-airflow:
    image: postgres
    platform: linux/amd64
    container_name: db_airflow
    hostname: db_airflow
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: admin
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c wal_level=logical
    ports:
      - 25432:5432
    volumes:
      - ./postgres-airflow/volume:/var/lib/postgresql/data
      - ./util:/util

  db-metabase:
    image: postgres
    platform: linux/amd64
    container_name: db_metabase
    hostname: db_metabase
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: admin
    command: postgres -c shared_preload_libraries=pg_stat_statements -c pg_stat_statements.track=all -c max_connections=200 -c wal_level=logical
    ports:
      - 35432:5432
    volumes:
      - ./postgres-metabase/volume:/var/lib/postgresql/data
      - ./util:/util

  hive:
    hostname: hive
    #image: apache/hive:4.0.0-beta-1
    image: fjardim/mds-hive
    platform: linux/amd64
    container_name: hive
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: hiveserver2
      SERVICE_OPTS: "-Dhive.metastore.uris=thrift://metastore:9083" 
      IS_RESUME: "true"
      #HIVE_VERSION: "3.1.3"
    ports:
       - "10000:10000"
       - "10002:10002"
    depends_on:
      - metastore
    user: root
    volumes:
       - ./hive/conf:/hive_custom_conf
       - ./util:/util
    command: >
      sh -c "pkill -f HiveServer2 || true && sleep 2 && start-hive"
          
  metastore:
    hostname: metastore
    platform: linux/amd64
    image: fjardim/mds-hive-metastore
    #image: apache/hive:4.0.0-beta-1
    container_name: metastore
    environment:
      AWS_ACCESS_KEY_ID: datalake
      AWS_SECRET_ACCESS_KEY: datalake
      HIVE_CUSTOM_CONF_DIR: "/hive_custom_conf"
      SERVICE_NAME: metastore
      #SERVICE_OPTS: "-Dhive.metastore.uris=thrift://metastore:9083" 
      IS_RESUME: "true"
      DB_DRIVER: postgres
      SERVICE_OPTS: "-Djavax.jdo.option.ConnectionDriverName=org.postgresql.Driver -Djavax.jdo.option.ConnectionURL=jdbc:postgresql://db:5432/admin -Djavax.jdo.option.ConnectionUserName=admin -Djavax.jdo.option.ConnectionPassword=admin" 
    ports:
       - "9083:9083"
    depends_on:
        - db
    user: root
    volumes:
       - ./hive/meta:/opt/hive/data/warehouse 
       - ./hive/conf:/hive_custom_conf
       - ./util:/util
############################
## VISUALIZACAO
############################
  metabase:
      image: metabase/metabase:latest
      platform: linux/amd64
      container_name: metabase
      hostname: metabase
      ports:
        - 3000:3000
      depends_on:
        - db-metabase
      environment:
        MB_DB_TYPE: postgres
        MB_DB_DBNAME: admin
        MB_DB_PORT: 5432
        MB_DB_PASS: admin
        MB_DB_USER: admin
        MB_DB_HOST: db_metabase
        MB_PASSWORD_COMPLEXITY: "weak"
        MB_PASSWORD_LENGTH: 4
        #user user@datalab.com.br pass datalab
      volumes:
        - ./util:/util

#############################
## GENERAL
#############################
networks:
  datalab:
    driver: bridge
